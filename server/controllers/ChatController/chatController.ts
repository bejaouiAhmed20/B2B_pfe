import { Request, Response } from 'express';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { Flight } from '../../models/Flight';
import { User } from '../../models/User';
import { Reservation } from '../../models/Reservation';
import { Airport } from '../../models/Airport';
import { News } from '../../models/News';
import { Location } from '../../models/Location';

// Initialize Gemini API with your key
const API_KEY = 'AIzaSyDik7bpo_rfdYVTzDR8ym0QCOzBIJDTsQ8';
const MODEL_VERSION = 'gemini-1.5-flash';
const genAI = new GoogleGenerativeAI(API_KEY);

// Project knowledge base
const PROJECT_KNOWLEDGE = {
  projectInfo: {
    name: "Tunisair B2B Platform",
    description: "Plateforme de r√©servation B2B pour Tunisair permettant aux entreprises de g√©rer leurs voyages d'affaires",
    technologies: ["React", "Node.js", "TypeScript", "MySQL", "Material-UI", "Express.js"],
    features: ["R√©servations de vols", "Gestion des utilisateurs", "Tableau de bord", "R√©clamations", "Contrats", "Popups", "Chatbot IA"]
  },

  userGuides: {
    login: "Pour vous connecter : 1) Allez sur la page de connexion, 2) Entrez votre email et mot de passe, 3) Cliquez sur 'Se connecter'",
    booking: "Pour r√©server un vol : 1) Recherchez des vols, 2) S√©lectionnez votre vol, 3) Choisissez vos si√®ges, 4) Confirmez la r√©servation",
    profile: "Pour modifier votre profil : 1) Allez dans 'Mon Profil', 2) Modifiez vos informations, 3) Sauvegardez",
    claims: "Pour faire une r√©clamation : 1) Allez dans 'R√©clamations', 2) Cliquez sur 'Nouvelle r√©clamation', 3) Remplissez le formulaire",
    dashboard: "Le tableau de bord affiche : statistiques des vols, revenus, r√©servations par classe, destinations populaires",
    contract: "Pour consulter votre contrat : 1) Allez dans 'Mon Contrat', 2) Consultez les d√©tails, 3) T√©l√©chargez le PDF si n√©cessaire",
    solde: "Pour demander un solde : 1) Allez dans 'Demande Solde', 2) Remplissez le formulaire, 3) Attendez l'approbation"
  },

  technicalInfo: {
    architecture: "Architecture 3-tiers : Frontend React + Backend Node.js + Base de donn√©es MySQL",
    authentication: "Authentification JWT avec r√¥les (admin/client)",
    database: "Base de donn√©es relationnelle avec entit√©s : Users, Flights, Reservations, Airports, etc.",
    api: "API RESTful avec endpoints pour toutes les fonctionnalit√©s",
    deployment: "Serveur de d√©veloppement sur localhost:3000 (client) et localhost:5000 (serveur)"
  },

  troubleshooting: {
    loginIssues: "Probl√®mes de connexion : V√©rifiez vos identifiants, videz le cache, contactez l'admin",
    bookingIssues: "Probl√®mes de r√©servation : V√©rifiez la disponibilit√©, votre solde, ou contactez le support",
    performanceIssues: "Probl√®mes de performance : Rafra√Æchissez la page, v√©rifiez votre connexion internet"
  }
};

// Enhanced function to detect user intent and provide specific help
function detectIntent(message: string): string {
  const msg = message.toLowerCase();

  // Login/Authentication
  if (msg.includes('connexion') || msg.includes('login') || msg.includes('connecter')) {
    return 'login';
  }

  // Booking/Reservation (more specific to avoid conflict with "vols")
  if (msg.includes('r√©server') || msg.includes('r√©servation') || msg.includes('booking') ||
      msg.includes('comment r√©server') || msg.includes('guide r√©servation')) {
    return 'booking';
  }

  // Profile management
  if (msg.includes('profil') || msg.includes('compte') || msg.includes('profile')) {
    return 'profile';
  }

  // Claims/Complaints
  if (msg.includes('r√©clamation') || msg.includes('plainte') || msg.includes('probl√®me')) {
    return 'claims';
  }

  // Dashboard
  if (msg.includes('tableau de bord') || msg.includes('dashboard') || msg.includes('statistiques')) {
    return 'dashboard';
  }

  // Contract
  if (msg.includes('contrat') || msg.includes('contract')) {
    return 'contract';
  }

  // Solde/Balance
  if (msg.includes('solde') || msg.includes('balance') || msg.includes('cr√©dit')) {
    return 'solde';
  }

  // Technical help
  if (msg.includes('technique') || msg.includes('erreur') || msg.includes('bug') || msg.includes('probl√®me technique')) {
    return 'technical';
  }

  // Project info
  if (msg.includes('projet') || msg.includes('plateforme') || msg.includes('tunisair') || msg.includes('b2b')) {
    return 'project';
  }

  return 'general';
}

// Function to get specific help based on intent
function getSpecificHelp(intent: string): string {
  const guides = PROJECT_KNOWLEDGE.userGuides;
  const tech = PROJECT_KNOWLEDGE.technicalInfo;
  const project = PROJECT_KNOWLEDGE.projectInfo;

  switch (intent) {
    case 'login':
      return guides.login;

    case 'booking':
      return guides.booking;

    case 'profile':
      return guides.profile;

    case 'claims':
      return guides.claims;

    case 'dashboard':
      return guides.dashboard;

    case 'contract':
      return guides.contract;

    case 'solde':
      return guides.solde;

    case 'technical':
      return `Architecture technique :\n- ${tech.architecture}\n- ${tech.authentication}\n- ${tech.database}\n- ${tech.api}\n- ${tech.deployment}`;

    case 'project':
      return `${project.name} : ${project.description}\nTechnologies : ${project.technologies.join(', ')}\nFonctionnalit√©s : ${project.features.join(', ')}`;

    default:
      return '';
  }
}

// Function to get real-time data from database
async function getRealTimeData(dataType: string): Promise<any> {
  try {
    switch (dataType) {
      case 'flights':
        const currentDate = new Date();
        const flights = await Flight.createQueryBuilder('flight')
          .leftJoinAndSelect('flight.airport_depart', 'airport_depart')
          .leftJoinAndSelect('flight.arrival_airport', 'arrival_airport')
          .where('flight.date_depart >= :currentDate', { currentDate })
          .orderBy('flight.date_depart', 'ASC')
          .take(5)
          .getMany();

        // Ensure we have valid data
        const validFlights = flights.filter(flight =>
          flight && flight.date_depart &&
          (flight.airport_depart || flight.arrival_airport)
        );

        return validFlights;

      case 'reservations':
        const reservations = await Reservation.find({
          take: 5,
          order: { id: 'DESC' }
        });
        return reservations || [];

      case 'users':
        const userCount = await User.count();
        return { count: userCount || 0 };

      case 'news':
        const news = await News.find({
          take: 3,
          order: { id: 'DESC' }
        });
        return news || [];

      default:
        return null;
    }
  } catch (error) {
    console.error('Error fetching real-time data:', error);
    return null;
  }
}

// Function to format flight data for chat response
function formatFlightData(flights: any[]): string {
  if (!flights || flights.length === 0) {
    return "Aucun vol disponible pour le moment. Veuillez v√©rifier plus tard ou contacter notre service client.";
  }

  try {
    const flightList = flights.map((flight) => {
      // Safe data extraction with fallbacks
      const departure = flight.airport_depart?.nom ||
                       flight.airport_depart?.code ||
                       flight.airport_depart_id ||
                       'A√©roport de d√©part';

      const arrival = flight.arrival_airport?.nom ||
                     flight.arrival_airport?.code ||
                     flight.airport_arrivee_id ||
                     'A√©roport d\'arriv√©e';

      // Safe date formatting
      let formattedDate = 'Date √† confirmer';
      if (flight.date_depart) {
        try {
          const date = new Date(flight.date_depart);
          if (!isNaN(date.getTime())) {
            formattedDate = date.toLocaleDateString('fr-FR', {
              weekday: 'short',
              year: 'numeric',
              month: 'short',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            });
          }
        } catch (dateError) {
          console.error('Date formatting error:', dateError);
        }
      }

      // Safe price formatting
      const price = flight.prix ? `${flight.prix} TND` : 'Prix √† confirmer';

      // Flight title if available
      const title = flight.titre ? `\nVol: ${flight.titre}` : '';

      return `üõ´ ${departure} ‚Üí ${arrival}${title}\nüìÖ ${formattedDate}\nüí∞ ${price}\n`;
    }).join('\n');

    return `‚úàÔ∏è Voici les prochains vols disponibles :\n\n${flightList}\nüí° Pour r√©server, utilisez notre interface de r√©servation ou contactez notre service client.`;

  } catch (error) {
    console.error('Error formatting flight data:', error);
    return "Erreur lors de l'affichage des vols. Veuillez r√©essayer ou contacter notre service client.";
  }
}

// Enhanced function to provide contextual help
async function getContextualHelp(message: string): Promise<string> {
  const msg = message.toLowerCase();

  // Check for real-time data requests FIRST (before intent detection)
  // This ensures "vols" shows available flights instead of booking guide
  if (msg.includes('vols disponibles') || msg.includes('voir les vols') || msg === 'vols' || msg.includes('liste des vols')) {
    const flights = await getRealTimeData('flights');
    return formatFlightData(flights);
  }

  if (msg.includes('actualit√©s') || msg.includes('news') || msg.includes('derni√®res actualit√©s')) {
    const news = await getRealTimeData('news');
    if (news && news.length > 0) {
      const newsList = news.map((item: any) => {
        const title = item.titre || 'Actualit√© sans titre';
        const date = item.createdAt ?
          new Date(item.createdAt).toLocaleDateString('fr-FR') :
          'Date non disponible';
        return `üì∞ ${title}\n   üìÖ ${date}`;
      }).join('\n\n');
      return `üì¢ Derni√®res actualit√©s :\n\n${newsList}\n\nüí° Pour plus de d√©tails, consultez la section Actualit√©s de notre plateforme.`;
    } else {
      return "üì¢ Aucune actualit√© disponible pour le moment. Veuillez v√©rifier plus tard.";
    }
  }

  // Then check for specific intents
  const intent = detectIntent(message);
  const specificHelp = getSpecificHelp(intent);

  if (specificHelp) {
    return specificHelp;
  }

  // Provide general help menu
  return `Assistant Tunisair B2B - Comment puis-je vous aider ?\n\n` +
    `Commandes disponibles :\n` +
    `‚Ä¢ "connexion" - Aide pour se connecter\n` +
    `‚Ä¢ "r√©servation" - Guide de r√©servation\n` +
    `‚Ä¢ "profil" - Gestion du profil\n` +
    `‚Ä¢ "r√©clamation" - Faire une r√©clamation\n` +
    `‚Ä¢ "contrat" - Consulter votre contrat\n` +
    `‚Ä¢ "solde" - Demander un solde\n` +
    `‚Ä¢ "vols" - Voir les vols disponibles\n` +
    `‚Ä¢ "projet" - Informations sur la plateforme\n` +
    `‚Ä¢ "technique" - Aide technique\n\n` +
    `Astuce : Posez-moi n'importe quelle question sur l'utilisation de la plateforme !`;
}

// Enhanced function to call Gemini API with project context
async function callGemini(userMessage: string): Promise<string> {
  try {
    const model = genAI.getGenerativeModel({ model: MODEL_VERSION });

    const projectContext = `
    Tu es l'assistant IA officiel de Tunisair B2B, sp√©cialis√© dans l'aide aux clients de notre plateforme de r√©servation de vols d'affaires.

    INFORMATIONS SUR LA PLATEFORME:
    - Plateforme: ${PROJECT_KNOWLEDGE.projectInfo.name}
    - Mission: Faciliter les r√©servations de vols d'affaires pour les entreprises partenaires de Tunisair
    - Services: R√©servations, gestion de profil, contrats, demandes de solde, r√©clamations, actualit√©s

    TON R√îLE:
    - Aider UNIQUEMENT les clients (pas les administrateurs)
    - Fournir des informations pr√©cises et v√©rifi√©es
    - Guider les utilisateurs dans l'utilisation de la plateforme
    - R√©pondre aux questions sur les proc√©dures et fonctionnalit√©s
    - Orienter vers le service client si n√©cessaire

    R√àGLES IMPORTANTES:
    1. R√©ponds TOUJOURS en fran√ßais
    2. Sois professionnel, courtois et pr√©cis
    3. Si tu ne connais pas une information, dis-le clairement
    4. Ne donne JAMAIS d'informations sur les fonctions administrateur
    5. Encourage l'utilisation des fonctionnalit√©s de la plateforme
    6. En cas de probl√®me technique, oriente vers le service client

    COMMANDES DISPONIBLES POUR LES CLIENTS:
    - "vols" : Voir les vols disponibles
    - "r√©servation" : Guide de r√©servation
    - "contrat" : Consulter son contrat
    - "solde" : Demander un solde
    - "r√©clamation" : Faire une r√©clamation
    - "profil" : G√©rer son profil
    - "actualit√©s" : Voir les derni√®res nouvelles

    R√©ponds de mani√®re utile et pr√©cise √† la question du client.
    `;

    const prompt = `${projectContext}\n\nQuestion du client: ${userMessage}\n\nR√©ponds en fran√ßais de mani√®re professionnelle et utile:`;

    const result = await model.generateContent(prompt);
    const response = result.response;
    return response.text();
  } catch (error) {
    console.error('Error calling Gemini API:', error);
    return 'D√©sol√©, j\'ai rencontr√© une erreur lors du traitement de votre demande.';
  }
}

// Main chat handler
export async function handleChat(req: Request, res: Response) {
  try {
    const userMessage: string = req.body.message || '';

    if (!userMessage) {
      console.log('‚ùå Aucun message fourni dans la requ√™te');
      return res.status(400).json({
        error: 'Aucun message fourni.'
      });
    }

    console.log('üì® Message re√ßu:', userMessage);

    let reply = '';
    let responseSource = '';

    // First, try to get contextual help (this includes real-time data and specific guides)
    const contextualHelp = await getContextualHelp(userMessage);

    // If we have specific contextual help, use it
    if (contextualHelp && !contextualHelp.includes('Comment puis-je vous aider')) {
      reply = contextualHelp;
      responseSource = 'contextual';
      console.log('‚úÖ R√©ponse contextuelle fournie');
    } else {
      // Otherwise, use Gemini AI with project context
      console.log('ü§ñ Utilisation de Gemini AI...');
      reply = await callGemini(userMessage);
      responseSource = 'gemini';
      console.log('‚úÖ R√©ponse Gemini fournie');
    }

    // Add helpful suggestions at the end for general queries
    if (userMessage.toLowerCase().includes('aide') || userMessage.toLowerCase().includes('bonjour')) {
      const suggestions = '\n\nüí° Suggestions :\n‚Ä¢ Tapez "vols" pour voir les vols disponibles\n‚Ä¢ Tapez "r√©servation" pour le guide de r√©servation\n‚Ä¢ Tapez "contrat" pour consulter votre contrat\n‚Ä¢ Tapez "solde" pour les demandes de solde';

      if (!reply.includes('Suggestions')) {
        reply += suggestions;
      }
    }

    // Ensure we have a valid reply
    if (!reply || reply.trim() === '') {
      reply = "Je suis d√©sol√©, je n'ai pas pu traiter votre demande. Veuillez r√©essayer ou contacter notre service client.";
      console.log('‚ö†Ô∏è R√©ponse vide, utilisation du message par d√©faut');
    }

    console.log(`üì§ R√©ponse envoy√©e (source: ${responseSource}):`, reply.substring(0, 100) + '...');

    return res.json({ reply });
  } catch (err) {
    console.error('‚ùå Erreur dans le gestionnaire de chat:', err);
    return res.status(500).json({
      error: 'Erreur interne du serveur. Veuillez r√©essayer plus tard.',
      details: process.env.NODE_ENV === 'development' ? String(err) : undefined
    });
  }
}
