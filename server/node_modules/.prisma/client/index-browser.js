
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AirportScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  code: 'code',
  pays: 'pays',
  description: 'description',
  est_actif: 'est_actif',
  location_id: 'location_id'
};

exports.Prisma.CompteScalarFieldEnum = {
  id: 'id',
  solde: 'solde',
  created_at: 'created_at',
  updated_at: 'updated_at',
  user_id: 'user_id'
};

exports.Prisma.ContractScalarFieldEnum = {
  id: 'id',
  clientType: 'clientType',
  label: 'label',
  contractStartDate: 'contractStartDate',
  contractEndDate: 'contractEndDate',
  guaranteedMinimum: 'guaranteedMinimum',
  travelStartDate: 'travelStartDate',
  travelEndDate: 'travelEndDate',
  isActive: 'isActive',
  modifiedFeeAmount: 'modifiedFeeAmount',
  payLater: 'payLater',
  payLaterTimeLimit: 'payLaterTimeLimit',
  minTimeBeforeBalanceFlight: 'minTimeBeforeBalanceFlight',
  invoiceStamp: 'invoiceStamp',
  finalClientAdditionalFees: 'finalClientAdditionalFees',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  client_id: 'client_id',
  fixedTicketPrice: 'fixedTicketPrice',
  coupon_id: 'coupon_id'
};

exports.Prisma.Contract_couponsScalarFieldEnum = {
  contract_id: 'contract_id',
  coupon_id: 'coupon_id'
};

exports.Prisma.CouponScalarFieldEnum = {
  id: 'id',
  code: 'code',
  reduction: 'reduction',
  reduction_type: 'reduction_type',
  date_fin: 'date_fin',
  date_creation: 'date_creation'
};

exports.Prisma.FlightScalarFieldEnum = {
  id: 'id',
  titre: 'titre',
  prix: 'prix',
  date_depart: 'date_depart',
  date_retour: 'date_retour',
  duree: 'duree',
  status: 'status',
  airport_depart_id: 'airport_depart_id',
  airport_arrivee_id: 'airport_arrivee_id',
  plane_id: 'plane_id'
};

exports.Prisma.Flight_seat_reservationScalarFieldEnum = {
  id: 'id',
  isReserved: 'isReserved',
  flight_id: 'flight_id',
  seat_id: 'seat_id',
  reservation_id: 'reservation_id'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  pays: 'pays',
  ville: 'ville',
  description: 'description',
  url_image: 'url_image'
};

exports.Prisma.NewsScalarFieldEnum = {
  id: 'id',
  titre: 'titre',
  contenu: 'contenu',
  image_url: 'image_url',
  date_creation: 'date_creation'
};

exports.Prisma.PlaneScalarFieldEnum = {
  idPlane: 'idPlane',
  planeModel: 'planeModel',
  totalSeats: 'totalSeats',
  seatConfiguration: 'seatConfiguration'
};

exports.Prisma.ReclamationScalarFieldEnum = {
  id: 'id',
  sujet: 'sujet',
  description: 'description',
  statut: 'statut',
  date_creation: 'date_creation',
  reponse: 'reponse',
  date_reponse: 'date_reponse',
  user_id: 'user_id'
};

exports.Prisma.Request_soldeScalarFieldEnum = {
  id: 'id',
  montant: 'montant',
  description: 'description',
  date: 'date',
  status: 'status',
  imageUrl: 'imageUrl',
  client_id: 'client_id'
};

exports.Prisma.ReservationScalarFieldEnum = {
  id: 'id',
  date_reservation: 'date_reservation',
  statut: 'statut',
  prix_total: 'prix_total',
  nombre_passagers: 'nombre_passagers',
  coupon_code: 'coupon_code',
  discount_amount: 'discount_amount',
  class_type: 'class_type',
  fare_type: 'fare_type',
  user_id: 'user_id',
  flight_id: 'flight_id',
  coupon_id: 'coupon_id'
};

exports.Prisma.SeatScalarFieldEnum = {
  idSeat: 'idSeat',
  seatNumber: 'seatNumber',
  classType: 'classType',
  availability: 'availability',
  idPlane: 'idPlane'
};

exports.Prisma.Seat_reservationScalarFieldEnum = {
  id: 'id',
  seat_id: 'seat_id',
  reservation_id: 'reservation_id',
  flight_id: 'flight_id'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  email: 'email',
  numero_telephone: 'numero_telephone',
  pays: 'pays',
  adresse: 'adresse',
  est_admin: 'est_admin',
  mot_de_passe: 'mot_de_passe'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.airportOrderByRelevanceFieldEnum = {
  id: 'id',
  nom: 'nom',
  code: 'code',
  pays: 'pays',
  description: 'description',
  location_id: 'location_id'
};

exports.Prisma.compteOrderByRelevanceFieldEnum = {
  id: 'id',
  user_id: 'user_id'
};

exports.Prisma.contractOrderByRelevanceFieldEnum = {
  id: 'id',
  clientType: 'clientType',
  label: 'label',
  client_id: 'client_id',
  coupon_id: 'coupon_id'
};

exports.Prisma.contract_couponsOrderByRelevanceFieldEnum = {
  contract_id: 'contract_id',
  coupon_id: 'coupon_id'
};

exports.Prisma.couponOrderByRelevanceFieldEnum = {
  id: 'id',
  code: 'code'
};

exports.Prisma.flightOrderByRelevanceFieldEnum = {
  id: 'id',
  titre: 'titre',
  duree: 'duree',
  status: 'status',
  airport_depart_id: 'airport_depart_id',
  airport_arrivee_id: 'airport_arrivee_id'
};

exports.Prisma.flight_seat_reservationOrderByRelevanceFieldEnum = {
  id: 'id',
  flight_id: 'flight_id',
  reservation_id: 'reservation_id'
};

exports.Prisma.locationOrderByRelevanceFieldEnum = {
  id: 'id',
  nom: 'nom',
  pays: 'pays',
  ville: 'ville',
  description: 'description',
  url_image: 'url_image'
};

exports.Prisma.newsOrderByRelevanceFieldEnum = {
  id: 'id',
  titre: 'titre',
  contenu: 'contenu',
  image_url: 'image_url'
};

exports.Prisma.planeOrderByRelevanceFieldEnum = {
  planeModel: 'planeModel',
  seatConfiguration: 'seatConfiguration'
};

exports.Prisma.reclamationOrderByRelevanceFieldEnum = {
  id: 'id',
  sujet: 'sujet',
  description: 'description',
  statut: 'statut',
  reponse: 'reponse',
  user_id: 'user_id'
};

exports.Prisma.request_soldeOrderByRelevanceFieldEnum = {
  id: 'id',
  description: 'description',
  imageUrl: 'imageUrl',
  client_id: 'client_id'
};

exports.Prisma.reservationOrderByRelevanceFieldEnum = {
  id: 'id',
  statut: 'statut',
  coupon_code: 'coupon_code',
  class_type: 'class_type',
  fare_type: 'fare_type',
  user_id: 'user_id',
  flight_id: 'flight_id',
  coupon_id: 'coupon_id'
};

exports.Prisma.seatOrderByRelevanceFieldEnum = {
  seatNumber: 'seatNumber'
};

exports.Prisma.seat_reservationOrderByRelevanceFieldEnum = {
  reservation_id: 'reservation_id',
  flight_id: 'flight_id'
};

exports.Prisma.userOrderByRelevanceFieldEnum = {
  id: 'id',
  nom: 'nom',
  email: 'email',
  numero_telephone: 'numero_telephone',
  pays: 'pays',
  adresse: 'adresse',
  mot_de_passe: 'mot_de_passe'
};
exports.coupon_reduction_type = exports.$Enums.coupon_reduction_type = {
  percentage: 'percentage',
  fixed: 'fixed'
};

exports.request_solde_status = exports.$Enums.request_solde_status = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

exports.seat_classType = exports.$Enums.seat_classType = {
  economy: 'economy',
  business: 'business',
  first: 'first'
};

exports.Prisma.ModelName = {
  airport: 'airport',
  compte: 'compte',
  contract: 'contract',
  contract_coupons: 'contract_coupons',
  coupon: 'coupon',
  flight: 'flight',
  flight_seat_reservation: 'flight_seat_reservation',
  location: 'location',
  news: 'news',
  plane: 'plane',
  reclamation: 'reclamation',
  request_solde: 'request_solde',
  reservation: 'reservation',
  seat: 'seat',
  seat_reservation: 'seat_reservation',
  user: 'user'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
